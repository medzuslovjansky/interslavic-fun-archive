{"version":3,"file":"assets/js/f71a1cb7.075a85c8.js","mappings":"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","sources":["webpack://interslavic-fun/./docs/learn/simple-grammar/index.mdx","webpack://interslavic-fun/./node_modules/@docusaurus/theme-classic/lib/theme/DocCard/styles.module.css","webpack://interslavic-fun/./node_modules/@docusaurus/theme-classic/lib/theme/DocCard/index.js","webpack://interslavic-fun/./node_modules/@docusaurus/theme-classic/lib/theme/DocCardList/index.js","webpack://interslavic-fun/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["\n\nexport const frontMatter = {\n\tsidebar_position: 6\n};\nexport const contentTitle = 'Simple grammar';\nexport const metadata = {\n  \"unversionedId\": \"learn/simple-grammar/index\",\n  \"id\": \"learn/simple-grammar/index\",\n  \"title\": \"Simple grammar\",\n  \"description\": \"Simplified grammar, or Slovianto, is a highly simplified form of Interslavic that allows non-Slavic people to express themselves at a very basic level when visiting Slavic countries or maintaining contact with Slavs via the Internet. Grammar is limited to a bare minimum, and forms that are not strictly necessary are not used at all. Because it does not contain anything that cannot be found in the Slavic languages, the result wil not look or sound too awkward to Slavic speakers, but rather remind them of the kind of language used by small children.\",\n  \"source\": \"@site/docs/learn/simple-grammar/index.mdx\",\n  \"sourceDirName\": \"learn/simple-grammar\",\n  \"slug\": \"/learn/simple-grammar/\",\n  \"permalink\": \"/pl/learn/simple-grammar/\",\n  \"draft\": false,\n  \"unlisted\": false,\n  \"editUrl\": \"https://github.com/medzuslovjansky/interslavic.fun/edit/main/docs/learn/simple-grammar/index.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"lastUpdatedBy\": \"Artem Vasylenko\",\n  \"lastUpdatedAt\": 1688978862,\n  \"formattedLastUpdatedAt\": \"10 lip 2023\",\n  \"sidebarPosition\": 6,\n  \"frontMatter\": {\n    \"sidebar_position\": 6\n  },\n  \"sidebar\": \"learnSidebar\",\n  \"previous\": {\n    \"title\": \"Pronunciation\",\n    \"permalink\": \"/pl/learn/pronunciation\"\n  },\n  \"next\": {\n    \"title\": \"Level 1\",\n    \"permalink\": \"/pl/learn/simple-grammar/level-1\"\n  }\n};\nexport const assets = {\n\n};\n\n/*@jsxRuntime automatic @jsxImportSource react*/\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport DocCardList from '@theme/DocCardList';\nexport const toc = [];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {CustomBeforeSection, CustomAfterSection} = _components;\n  if (!CustomAfterSection) _missingMdxReference(\"CustomAfterSection\", true);\n  if (!CustomBeforeSection) _missingMdxReference(\"CustomBeforeSection\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"simple-grammar\",\n      children: \"Simple grammar\"\n    }), \"\\n\", _jsx(CustomBeforeSection, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"Simplified grammar, or \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"Slovianto\"\n        })\n      }), \", is a highly simplified form of Interslavic that allows non-Slavic people to express themselves at a very basic level when visiting Slavic countries or maintaining contact with Slavs via the Internet. Grammar is limited to a bare minimum, and forms that are not strictly necessary are not used at all. Because it does not contain anything that cannot be found in the Slavic languages, the result wil not look or sound too awkward to Slavic speakers, but rather remind them of the kind of language used by small children.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"Slovianto\"\n      }), \" can also be used as a first step in the process of learning the „real” Interslavic language. It has been constructed in such way that it can gradually be expanded with new bits and pieces that occur in more complex versions. Thus, we distinguish three different levels, each of them adding new elements that bring \", _jsx(_components.code, {\n        children: \"Slovianto\"\n      }), \" closer to Interslavic:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Level 1\"\n        }), \" – the simplest level: no gender, no cases, only singular/plural, one verb ending per tense\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Level 2\"\n        }), \" – introduction to gender, simple model for conjugating verbs (things that can be found in all Slavic languages)\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The working title \", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"Slovianto\"\n        })\n      }), \" is a portmanteau word for „Slavic Esperanto”. This name, albeit somewhat tongue-in-cheek, refers to the simplicity of \", _jsx(_components.code, {\n        children: \"Slovianto\"\n      }), \": it has no gender, no cases, no aspect, little conjugation and no irregularity. Yet, that is where the similarity to Esperanto ends, because \", _jsx(_components.code, {\n        children: \"Slovianto\"\n      }), \"'s means of simplification are in fact far more similar to those used by Interlingua\"]\n    }), \"\\n\", _jsx(DocCardList, {}), \"\\n\", _jsx(CustomAfterSection, {})]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"cardContainer\":\"cardContainer_fWXF\",\"cardTitle\":\"cardTitle_rnsV\",\"cardDescription\":\"cardDescription_PWke\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport Link from '@docusaurus/Link';\nimport {\n  findFirstSidebarItemLink,\n  useDocById,\n} from '@docusaurus/theme-common/internal';\nimport isInternalUrl from '@docusaurus/isInternalUrl';\nimport {translate} from '@docusaurus/Translate';\nimport Heading from '@theme/Heading';\nimport styles from './styles.module.css';\nfunction CardContainer({href, children}) {\n  return (\n    <Link\n      href={href}\n      className={clsx('card padding--lg', styles.cardContainer)}>\n      {children}\n    </Link>\n  );\n}\nfunction CardLayout({href, icon, title, description}) {\n  return (\n    <CardContainer href={href}>\n      <Heading\n        as=\"h2\"\n        className={clsx('text--truncate', styles.cardTitle)}\n        title={title}>\n        {icon} {title}\n      </Heading>\n      {description && (\n        <p\n          className={clsx('text--truncate', styles.cardDescription)}\n          title={description}>\n          {description}\n        </p>\n      )}\n    </CardContainer>\n  );\n}\nfunction CardCategory({item}) {\n  const href = findFirstSidebarItemLink(item);\n  // Unexpected: categories that don't have a link have been filtered upfront\n  if (!href) {\n    return null;\n  }\n  return (\n    <CardLayout\n      href={href}\n      icon=\"🗃️\"\n      title={item.label}\n      description={\n        item.description ??\n        translate(\n          {\n            message: '{count} items',\n            id: 'theme.docs.DocCard.categoryDescription',\n            description:\n              'The default description for a category card in the generated index about how many items this category includes',\n          },\n          {count: item.items.length},\n        )\n      }\n    />\n  );\n}\nfunction CardLink({item}) {\n  const icon = isInternalUrl(item.href) ? '📄️' : '🔗';\n  const doc = useDocById(item.docId ?? undefined);\n  return (\n    <CardLayout\n      href={item.href}\n      icon={icon}\n      title={item.label}\n      description={item.description ?? doc?.description}\n    />\n  );\n}\nexport default function DocCard({item}) {\n  switch (item.type) {\n    case 'link':\n      return <CardLink item={item} />;\n    case 'category':\n      return <CardCategory item={item} />;\n    default:\n      throw new Error(`unknown item type ${JSON.stringify(item)}`);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from 'react';\nimport clsx from 'clsx';\nimport {\n  useCurrentSidebarCategory,\n  filterDocCardListItems,\n} from '@docusaurus/theme-common';\nimport DocCard from '@theme/DocCard';\nfunction DocCardListForCurrentSidebarCategory({className}) {\n  const category = useCurrentSidebarCategory();\n  return <DocCardList items={category.items} className={className} />;\n}\nexport default function DocCardList(props) {\n  const {items, className} = props;\n  if (!items) {\n    return <DocCardListForCurrentSidebarCategory {...props} />;\n  }\n  const filteredItems = filterDocCardListItems(items);\n  return (\n    <section className={clsx('row', className)}>\n      {filteredItems.map((item, index) => (\n        <article key={index} className=\"col col--6 margin-bottom--lg\">\n          <DocCard item={item} />\n        </article>\n      ))}\n    </section>\n  );\n}\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["frontMatter","sidebar_position","contentTitle","metadata","assets","toc","_createMdxContent","props","_components","Object","assign","h1","p","strong","code","ul","li","components","CustomBeforeSection","CustomAfterSection","_missingMdxReference","children","id","wrapper","MDXLayout","component","Error","CardContainer","_ref","href","_jsx","Link","className","clsx","styles","cardContainer","CardLayout","_ref2","icon","title","description","_jsxs","Heading","as","cardTitle","cardDescription","CardCategory","_ref3","item","findFirstSidebarItemLink","label","translate","message","count","items","length","CardLink","_ref4","isInternalUrl","doc","useDocById","docId","undefined","DocCard","_ref5","type","JSON","stringify","DocCardListForCurrentSidebarCategory","category","useCurrentSidebarCategory","DocCardList","filteredItems","filterDocCardListItems","map","index","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","disableParentContext","allComponents","Provider","value"],"sourceRoot":""}